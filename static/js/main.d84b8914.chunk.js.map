{"version":3,"sources":["Images/hero.jpg","Components/Navbar/Navbar.js","Components/Searchbox/Searchbox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","useState","show","setShow","className","onClick","class","Searchbox","src","imgBackground","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,kC,mNC+C5BC,MA5Cf,WAAmB,IAAD,EAEKC,oBAAS,GAFd,mBAEXC,EAFW,KAENC,EAFM,KAOhB,OACE,6BACI,yBAAKC,UAAU,2BACX,yBAAKA,UAAY,mBAEf,yBAAKA,UAAY,kBACjB,uBAAGA,UAAU,gBAEb,yCAGA,yBAAKA,UAAY,eACjB,yBAAKC,QAfW,WACxBF,GAASD,IAcqCE,UAAY,mBAI9C,uBAAGE,MAAM,iBAGb,yBAAKF,UAAaF,EAAK,wBAAwB,oBAE7C,wBAAIE,UAAaF,EAAK,yBAAyB,IAC7C,gCAAK,uBAAGE,UAAY,mBAAf,UAAL,KACA,gCAAK,uBAAGA,UAAY,YAAf,UAAL,KACA,gCAAK,uBAAGA,UAAY,YAAf,SAAL,KACA,wBAAIA,UAAY,gBAAhB,IAAgC,uBAAGA,UAAY,YAAf,WAAhC,Y,wBCxBHG,MARf,WACE,OACE,yBAAKH,UAAY,iBACb,yBAAKI,IAAOC,QCOLC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d84b8914.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hero.0e0fd452.jpg\";","import React ,{useState}from 'react';\r\nimport './Navbar.css';\r\n// import NavToggleButton from \"../NavToggleButton/NavToggleButton\"\r\nfunction Navbar() {\r\n\r\n  let [show,setShow] = useState(false);\r\n\r\n  const toggleNavBtnDisplay = ()=>{\r\n      setShow(!show)\r\n  }\r\n  return (\r\n    <div>\r\n        <nav className=\"navbar navbar-expand-lg\">\r\n            <div className = \"container-fluid\">\r\n           \r\n              <div className = \"nav-IconHolder\">\r\n              <i className=\"fas fa-film\"></i>\r\n\r\n              <p>Catalog-Z</p>\r\n\r\n              </div>\r\n              <div className = \"displayFlex\">\r\n              <div onClick = {toggleNavBtnDisplay}  className = \"NavToggleButton\">\r\n                  {/* <div></div>\r\n                  <div></div>\r\n                  <div></div> */}\r\n                  <i class=\"fas fa-bars\" />\r\n              </div>       \r\n              {/* <i class=\"fas fa-bars\" onClick = {toggleNavBtnDisplay}  className = \"NavToggleButton\"></i>   */}\r\n              <div className = {show?\"show navButtonsHolder\":\"navButtonsHolder\"}>\r\n              \r\n                <ul className = {show?\"flowColung scale-up-tr\":\"\"}>\r\n                  <li> <p className = \"navLink1 active\">Photos</p> </li>\r\n                  <li> <p className = \"navLink2\">Videos</p> </li>\r\n                  <li> <p className = \"navLink3\">About</p> </li>\r\n                  <li className = \"marginRight0\"> <p className = \"navLink4\">Contact</p> </li>\r\n                </ul>\r\n              </div>\r\n              </div>\r\n            </div>\r\n            {/* {false && <NavToggleButton/>} */}\r\n         </nav>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport './Searchbox.css';\r\nimport imgBackground from \"../../Images/hero.jpg\";\r\nfunction Searchbox() {\r\n  return (\r\n    <div className = \"search-wraper\">\r\n        <img src = {imgBackground}></img>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Searchbox;\r\n","import React from 'react';\nimport './App.css';\nimport Navbar from \"./Components/Navbar/Navbar\";\nimport Searchbox from \"./Components/Searchbox/Searchbox\";\nfunction App() {\n  return (\n    <div>\n      <Navbar/>\n      <Searchbox/>      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}